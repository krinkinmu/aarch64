#ifndef __CC_UTILITY__
#define __CC_UTILITY__

#include <type_traits>


namespace std {

template <typename T>
remove_reference_t<T>&& move(T&& t) noexcept {
    return static_cast<remove_reference_t<T>&&>(t);
}

template <typename T>
remove_reference_t<T>&& forward(remove_reference_t<T>&& t) noexcept {
    static_assert(!is_lvalue_reference_v<T>);
    return static_cast<remove_reference_t<T>&&>(t);
}

template <typename T>
remove_reference_t<T>&& forward(remove_reference_t<T>& t) noexcept {
    return static_cast<remove_reference_t<T>&&>(t);
}

}  // namespace std

#endif  // __CC_UTILITY__
