#ifndef __CC_MEMORY__
#define __CC_MEMORY__

#include <algorithm>
#include <type_traits>
#include <utility>


namespace std {

template <typename T, typename Deleter>
class unique_ptr {

    template <typename U, typename D, typename = void>
    struct Ptr {
        using type = U*;
    };
    template <typename U, typename D>
    struct Ptr<U, D, void_t<typename remove_reference_t<D>::pointer>> {
        using type = typename remove_reference_t<D>::pointer;
    };

public:
    using element_type = T;
    using deleter_type = Deleter;
    using pointer = typename Ptr<T, Deleter>::type;

    constexpr unique_ptr() noexcept {}
    explicit unique_ptr(pointer ptr) : ptr_(ptr) {}
    constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() {}

    template <typename D = deleter_type>
    unique_ptr(pointer ptr, const D& d) noexcept : ptr_(ptr), del_(d) {}

    template <typename D = deleter_type>
    unique_ptr(pointer ptr, D&& del) : ptr_(ptr), del_(move(del)) {}

    template <typename T2, typename D2>
    unique_ptr(unique_ptr<T2, D2>&& u) noexcept
            : ptr_(u.release()), del_(move(u.get_deleter())) {}

    ~unique_ptr() noexcept {
        reset();
    }

    unique_ptr& operator=(unique_ptr&& u) {
        reset(u.release());
        del_ = move(u.del_);
        return *this;
    }

    unique_ptr& operator=(nullptr_t) noexcept {
        reset();
        return *this;
    }

    unique_ptr(const unique_ptr&) = delete;

    template <typename T2, typename D2>
    unique_ptr& operator=(unique_ptr<T2, D2>&& u) noexcept {
        reset(u.release());
        del_ = move(u.get_deleter());
        return *this;
    }

    unique_ptr& operator=(const unique_ptr&) = delete;

    void reset(pointer p = pointer()) noexcept {
        const pointer old = ptr_;
        ptr_ = p;
        if (old) {
            del_(old);
        }
    }

    pointer release() noexcept {
        pointer p = ptr_;
        ptr_ = pointer();
        return p;
    }

    void swap(unique_ptr& u) noexcept {
        using std::swap;
        swap(ptr_, u.ptr_);
        swap(del_, u.del_);
    }

    add_lvalue_reference_t<element_type> operator*() const {
        return *get();
    }

    pointer operator->() const noexcept {
        return get();
    }

    pointer get() const noexcept {
        return ptr_;
    }

    deleter_type& get_deleter() noexcept {
        return del_;
    }

    const deleter_type& get_deleter() const noexcept {
        return del_;
    }

    explicit operator bool() const noexcept {
        return get() != pointer();
    }

private:
    pointer ptr_;
    deleter_type del_;
};

template <typename T1, typename D1, typename T2, typename D2>
bool operator==(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() == u2.get();
}

template <typename T1, typename D1, typename T2, typename D2>
bool operator!=(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() != u2.get();
}

template <typename T1, typename D1, typename T2, typename D2>
bool operator<(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() < u2.get();
}

template <typename T1, typename D1, typename T2, typename D2>
bool operator>(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() > u2.get();
}

template <typename T1, typename D1, typename T2, typename D2>
bool operator<=(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() <= u2.get();
}

template <typename T1, typename D1, typename T2, typename D2>
bool operator>=(const unique_ptr<T1, D1>& u1, const unique_ptr<T2, D2>& u2) {
    return u1.get() >= u2.get();
}

template <typename T, typename D>
bool operator==(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() == nullptr;
}

template <typename T, typename D>
bool operator==(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 == nullptr;
}

template <typename T, typename D>
bool operator!=(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() != nullptr;
}

template <typename T, typename D>
bool operator!=(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 != nullptr;
}

template <typename T, typename D>
bool operator<(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() < nullptr;
}

template <typename T, typename D>
bool operator<(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 > nullptr;
}

template <typename T, typename D>
bool operator>(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() > nullptr;
}

template <typename T, typename D>
bool operator>(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 < nullptr;
}

template <typename T, typename D>
bool operator>=(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() >= nullptr;
}

template <typename T, typename D>
bool operator>=(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 <= nullptr;
}

template <typename T, typename D>
bool operator<=(const unique_ptr<T, D>& u1, nullptr_t) {
    return u1.get() <= nullptr;
}

template <typename T, typename D>
bool operator<=(nullptr_t, const unique_ptr<T, D>& u2) {
    return u2 >= nullptr;
}

}  // namespace std

#endif  // __CC_MEMORY__
